.. _glossary:

Glossary
========

The glossary of important terms used in the `documentation <index>`.

..  glossary::
    :sorted:

    exploration tree
        This is the data structure Molpher generates as it progresses through chemical space. It is
        represented in the API as an instance of `molpher.core.ExplorationTree`.

    Molpher-backend project
        The original Molpher project (located in the :file:`backend/` folder of the repository root).
        It contains the implementation of Molpher backend server.
        It needs to be compiled as a static library so that the `Molpher-lib project` can
        link against it during compilation.

    Molpher-lib project
        The implementation of Molpher-lib. It contains the :file:`include/` directory with the header files
        that define the C++ API.

    common headers
        Located in :file:`commons/` folder in the repository root, these header files are shared
        between `Molpher-backend project`, `Molpher-lib project` and the frontend.

    SAScore.dat
        The data file used for computation of the syntetic feasability scores.

    similarity measure
        A similarity measure measures similarity between two molecules using a `molecular fingerprint`.

    molecular fingerprint
        Molecular fingerprints are binary strings that encode certain structural features of a molecule.

    candidate morphs
        Morphs generated from the leaves of the `exploration tree`, but not yet attached to it.

    source molecule
        The root of the exploration tree. All morphs in the tree are descendents of this molecule.

    target molecule
        Target molecule of the whole exploration process. The algorithm attempts to generate a path
        in chemical space leading from the `source molecule` to this one.

    target molecule
        A molecule the chemical space exploration is driven towards. Each morph is evaluated according
        to its distance (using a `molecular fingerprint` and a `similarity measure`) from this molecule.

    exploration parameters
        A set of parameters (represented by the `molpher.core.ExplorationParameters` class) that define
        how the new morphs are generated, the tree is pruned, what similarity measure is used, etc. See
        the description of `molpher.core.ExplorationParameters` for details.

    morph
        Any molecule generated by Molpher.

    chemical operators
        A set of predefined structural modifications that a molecule can undergo during a morphing procedure.

    XML template
        A file in XML format that can be used as a configuration file and is loaded the same way as a tree snapshot
        (using the `ExplorationTreeSnapshot.load()` method).

    tree operation
        Any operation that manipulates the `exploration tree` and or its elements. Can be defined using
        the `TreeOperation` interface.

    morphing iteration
        Any sequence of operations that ends with attaching new generation of morphs to the tree.
        For example, an iteration is commited when `ExplorationTree.extend()` is called.

    morph generation
        The morphs attached to the tree upon commiting a `morphing iteration`.

    chemical space path
        A consecutive sequence of `morphs <morph>` created by iteratively applying
        a `chemical operator <chemical operators>` on the newest morph on the path.

    chemical space
        ..  todo:: document

    morphing parameters
        A set of restrictions and rules the `exploration tree` follows when certain actions are carried out on it.

    non-producing molecule
        A molecule that have not generated any morphs that would be closer to the trget than itself.

