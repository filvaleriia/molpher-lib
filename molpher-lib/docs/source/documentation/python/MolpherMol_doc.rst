MolpherMol
==========

.. py:currentmodule:: molpher.swig_wrappers.core

.. autoclass:: MolpherMol

    :param other: another instance of :py:class:`MolpherMol` (creates a copy)
    :type other: :py:class:`MolpherMol`

    Represents a molecule in the `exploration tree`. The underlying data representation
    of molecules in the tree can be observed and manipulated using instances of this class.

    .. warning:: If the instance is bound to a tree (use `isBound` to find out),
        do not save a reference to it anywhere in your program. The instance will become invalid,
        if it is later deleted/pruned from the tree and may result in undefined behaviour.
        Use `copy` to make a hard copy of the instance,
        if you need to work with the data even after
        the molecule is deleted/pruned or the whole tree destroyed.

    .. automethod:: isBound

        Returns :py:obj:`True`, if this instance is bound to a tree.

        :return:  :py:obj:`True` or :py:obj:`False`
        :rtype: :py:class:`bool`

    .. automethod:: copy

        Creates a new :py:class:`MolpherMol` instance, which is not bound to anything and lasts
        as long as it is needed.

        .. note:: Any modifications to the returned molecule will have no effect on the original instance.

        :return:  an unbound instance of :py:class:`MolpherMol`
        :rtype: :py:class:`MolpherMol`

    .. automethod:: getSMILES

        Returns canonical SMILES of the molecule.

        :return:  canonical SMILES representation (generated by RDKit)
        :rtype: :py:class:`str`

    .. automethod:: getDistToTarget

        Returns the distance of this molecule to the target molecule.

        By default computed as :math:`1 - similarity`, where
        :math:`similarity` is the similarity computed using the specified `molecular fingerprint`
        and `similarity measure`.

        .. seealso:: `molpher.core.ExplorationParameters`

        .. note:: Distance to target can be easily modified, if needed (see `setDistToTarget`).

        :return:  distance to target molecule
        :rtype: :py:class:`float`

    .. automethod:: getParentSMILES

        Canonical SMILES of the direct parent molecule in the respective `exploration tree`.

        :return:  canonical SMILES of parent
        :rtype: :py:class:`str`

    .. automethod:: getDescendants

        Returns all direct descendants of this molecule in the respective `exploration tree`
        as canonical SMILES.

        .. todo:: check if this description is correct

        :return:  an iterable of descendants
        :rtype: :py:class:`tuple` of :py:class:`str` objects

    .. automethod:: getHistoricDescendants

        Returns the historic descendants (all morphs created from this molecule) of this molecule
        in the respective `exploration tree` as canonical SMILES.

        .. todo:: check if this description is correct

        :return:  an iterable of descendants
        :rtype: :py:class:`tuple` of :py:class:`str` objects

    .. automethod:: getItersWithoutDistImprovement

        Returns the number of morphing generations derived from this molecule
        that didn't show any improvement in distance from the `target molecule`.

        .. todo:: specify more accurately

        .. seealso:: `molpher.core.ExplorationParameters.ExplorationParameters.non_producing_survive`

        :return:  number of generations without distance improvement
        :rtype: :py:class:`int`

    .. automethod:: getSAScore

        The synthesis feasibility score.

        .. todo:: specify more accurately

        :return:  synthesis feasibility score
        :rtype: :py:class:`float`

    .. automethod:: getMolecularWeight

        Returns the molecular weight of this compound.

        :return:  molecular weight
        :rtype: :py:class:`float`

    .. automethod:: setSAScore

        Set the synthesis feasibility score.

        .. todo:: specify more accurately

        :param score:  new synthesis feasibility score
        :type score: :py:class:`float`

    .. automethod:: setDistToTarget

        Set the distance to target to an arbitrary number.

        :param dist:  new distance to target
        :type dist: :py:class:`float`