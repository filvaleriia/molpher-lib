{% extends "base.html.template" %}
{% from 'figure.html.template' import figure %}

{% block append_head %}
<title>About</title>
{% endblock %}

{% block body %}
<div class="row">
	<div class="col s12">

		<h2 class="right-align">About</h2>
		<div class="divider"></div>

		<div class="section">

			<p>
				Molpher-lib is based on the program <a href="https://github.com/siret/molpher">Molpher</a> which implements systematic <a href="https://en.wikipedia.org/wiki/Chemical_space">chemical space</a> exploration using a method called <a href="http://www.ncbi.nlm.nih.gov/pubmed/24655571">molecular morphing</a>.
				Its purpose is not only to make molecular morphing easily accessible to a wider audience, but it also strives for becoming a powerful, transparent and easy-to-use <em>de novo</em> drug design tool.
			</p>

			<p>
				On this simple web page, we will try to explain what molecular morphing is, how it can be used in <em>de novo</em> drug design and we will hint at some advanages Molpher-lib has over the original Molpher. There is also a page dedicated to some quick usage <a href="examples.html">examples</a> as well as an extensive <a href="#docs">documentation</a>.
			</p>

		</div>

		<div class="section">
			<h3>Molecular Morphing</h3>

			<p>
				Molecular morphing is an atom-based <em>de novo</em> drug design method that uses stochastic optimization to search for a 'path' in chemical space. The so called path is a set of molecular structures that result from application of small structural modifications of the molecular structure of an input molecule. An example of such a path can be seen in the figure below.
			</p>

			{% call figure('images/path_example.svg')%}
			Example of a path generated by Molpher using some basic structural modifications. The modifications are shown as codes below the arrows (RA = remove atom, RB = remove bond, BR = bond reroute, MA = mutate atom).
			{% endcall %}

			<p>
				The original Molpher software was programmed to find a set of modifications needed to transform one molecular structure into another. Therefore, it can generate a set of 'hybrid' structures that combine the structural features of two input molecules; very much like <a href="https://en.wikipedia.org/wiki/Morphing">morphing</a> in computer graphics.
			</p>

			<p>
				One possible application of such algorithm is sampling unknown chemical space  'around' molecules with confirmed biological activity (see figure below). Here, Molpher (or Molpher-lib) can be used to generate a focused virtual library of hybrid structures that are derived from known active molecules. Such library could, for example, be used in a <a href="https://en.wikipedia.org/wiki/Virtual_screening">virutal screening</a> campaign that might yield new ligands with new chemotypes.
			</p>

			{% call figure('images/drug_space.png')%}
			Schematic depiction of a focused chemical space exploration experiment using molecular morphing. Multiple paths are generated between every pair of known active molecules (lines connecting the big diamonds, one example path is highlighted in red). Every path consists of intermediate (hybrid) structures (morphs, shown as small diamonds) that combine structural features of the pair that they connect. It is also possible (and generally a good idea) to impose constraints on the search space (denoted by the thick black lines enclosing the explored area). This will prevent the algorithm from generating structures with undesirable properties.
			{% endcall %}

		</div>

		<div class="section">
			<h3>Advantages of Molpher-lib over Molpher</h3>

			<p>
				advantages and stuff
			</p>

			<p>
				future directions and new functionality
			</p>
		</div>

		<div class="section" id="docs">
			<h3>Documentation</h3>
			<p>
				At the moment the highest stable version of the library is <b>{{ newest }}</b>.
				The documentation for each version is available through the links below:
			</p>


			<div class="collection">
				{% for version in versions %}
				<a href="./{{ version }}/" class="collection-item">{{ version }}</a>
				{% endfor %}
			</div>


		</div>

	</div>
</div>
{% endblock %}
