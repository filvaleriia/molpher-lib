{% extends "base.html.template" %}
{% from 'figure.html.template' import figure %}

{% block append_head %}
<title>About</title>
{% endblock %}

{% block body %}
<div class="row">

	<h2 class="right-align">About</h2>
	<div class="divider"></div>

	<div class="col s12 m9">
		<div id="introduction" class="section scrollspy">

			<p>
				Molpher-lib is based on the program <a href="https://github.com/siret/molpher">Molpher</a> which implements systematic <a href="https://en.wikipedia.org/wiki/Chemical_space">chemical space</a> exploration using a method called <a href="http://www.ncbi.nlm.nih.gov/pubmed/24655571">molecular morphing</a>.
				Its purpose is not only to make molecular morphing easily accessible to a wider audience, but it also strives for becoming a powerful, transparent and easy-to-use <em>de novo</em> drug design tool.
			</p>

			<p>
				On this simple web page, we will try to explain what molecular morphing is, how it can be used in <em>de novo</em> drug design and we will hint at some advanages Molpher-lib has over the original Molpher. There is also a page dedicated to some quick usage <a href="examples.html">examples</a> as well as an extensive <a href="#docs">documentation</a>.
			</p>

		</div>

		<div id="morphing" class="section scrollspy">
			<h3>Molecular Morphing</h3>

			<p>
				Molecular morphing is an atom-based <em>de novo</em> drug design method that uses stochastic optimization to search for a 'path' in chemical space. The so called path is a set of molecular structures that result from application of small structural modifications of the molecular structure of an input molecule. An example of such a path can be seen in the figure below.
			</p>

			{% call figure('images/path_example.svg')%}
			Example of a path generated by Molpher using some basic structural modifications. The modifications are shown as codes below the arrows (RA = remove atom, RB = remove bond, BR = bond reroute, MA = mutate atom).
			{% endcall %}

			<p>
				The original Molpher software was programmed to find a set of modifications needed to transform one molecular structure into another. Therefore, it can generate a set of 'hybrid' structures that combine the structural features of two input molecules; very much like <a href="https://en.wikipedia.org/wiki/Morphing">morphing</a> in computer graphics.
			</p>

			<p>
				One possible application of such algorithm is sampling unknown chemical space  'around' molecules with confirmed biological activity (see figure below). Here, Molpher (or Molpher-lib) can be used to generate a focused virtual library of hybrid structures that are derived from known active molecules. Such library could, for example, be used in a <a href="https://en.wikipedia.org/wiki/Virtual_screening">virutal screening</a> campaign that might yield new ligands with new chemotypes.
			</p>

			{% call figure('images/drug_space.png')%}
			Schematic depiction of a focused chemical space exploration experiment using molecular morphing. Multiple paths are generated between every pair of known active molecules (lines connecting the big diamonds, one example path is highlighted in red). Every path consists of intermediate (hybrid) structures (morphs, shown as small diamonds) that combine structural features of the pair that they connect. It is also possible (and generally a good idea) to impose constraints on the search space that will prevent the algorithm from generating structures with undesirable properties (represented by the thick black lines enclosing the explored area).
			{% endcall %}

		</div>

		<div id="advantages" class="section scrollspy">
			<h3>Advantages of Molpher-lib over Molpher</h3>

			<p>
				The motivation to develop Molpher-lib was mainly driven by various shortcomings of Molpher:
			</p>

			<ol>
				<li>It was developed as a standalone user-oriented software with no easy programmatic access to its features in mind.</li>
				<li>It only includes one exploration algorithm implementation with only very limited possibilities for customization.</li>
				<li>It only supports C++ programming language which makes experimenting with new exploration strategies difficult and interfacing with software in other languages very cumbersome.</li>
				<li>The software architecture is not modular enough which makes extending the C++ codebase a lengthy and difficult task.</li>
			</ol>

			<p>
				These problems were eliminated in Molpher-lib as follows:
			</p>

			<ol>
				<li>The focus of Molpher-lib is to bring a powerful extensible framework to developers, rather than to non-technical users. Therefore, the GUI was stripped from the program and what was once a backend server was turned into a C++ library with powerful API.</li>
				<li>The API of the library does not only offer options to adjust search settings, but also allows most of the essential parts of the algorithm to be overridden by the caller (see <a href="latest/usage/tutorial.html#tree-operations">tree operations</a>). This makes Molpher-lib a highly customizable framework and <a href="latest/usage/algorithms.html">various exploration algorithms</a> can be easily implemented.
				</li>
				<li>The whole C++ interface is exposed to Python and the library comes with a convenient Python package that also offers additional functionality and <a href="latest/usage/algorithms.html">algorithm implementations</a>. This makes the library much more compatible with a lot of popular scientific packages and makes interfacing with them very easy.</li>
				<li>Molpher-lib uses highly modular software architecture that divides its functionality in small independent chunks. This makes modification, replacement and integration of new functionality much easier than before.</li>
			</ol>

			<p>
				Thanks to all of the above the library has prerequisites to become a comprehensive and flexible <em>de novo</em> drug design framework. In the future, Molpher-lib will not only offer molecular morphing functionality, but will also include features that will allow for arbitrary evolution of molecular structures. This will be particularly useful in lead optimization and to quickly test new ideas in computer-aided drug design.
			</p>
		</div>

		<div class="section scrollspy" id="docs">
			<h3>Documentation</h3>
			<p>
				At the moment the highest non-development version of the library is <a href="./{{ newest }}/" class="collection-item"><b>{{ newest }}</b></a>.
				The documentation for each version is available through the links below:
			</p>


			<div class="collection">
				{% for version in versions %}
				<a href="./{{ version }}/" class="collection-item">{{ version }}</a>
				{% endfor %}
			</div>


		</div>

	</div>

	<div class="col hide-on-small-only m3">
		<ul class="section table-of-contents">
			<li><a href="#introduction">About</a></li>
			<li><a href="#morphing">Molecular Morphing</a></li>
			<li><a href="#advantages">Molpher-lib:&nbsp;Advantages</a></li>
			<li><a href="#docs">Documentation</a></li>
		</ul>
	</div>

</div>
{% endblock %}
